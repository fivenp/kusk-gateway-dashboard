/* Generated by restful-react */

import {Get, GetProps, useGet, UseGetProps} from 'restful-react';

export const SPEC_VERSION = '1.0.0';
export interface ApiItem {
  name: string;
  id: string;
  status: 'published' | 'unpublished';
  fleet: ApiItemFleet;
  service: ApiItemFleet;
}

export interface ServiceItem {
  name: string;
  id: string;
  status: 'available' | 'unavailable';
}

export interface EnvoyFleetItem {
  name: string;
  id: string;
}

export interface ApiItemFleet {
  name: string;
  namespace: string;
}

export interface GetApisQueryParams {
  /**
   * optional filter on fleet
   */
  fleet?: string;
}

export type GetApisProps = Omit<GetProps<ApiItem[], unknown, GetApisQueryParams, void>, 'path'>;

/**
 * gets a list of APIs
 */
export const GetApis = (props: GetApisProps) => (
  <Get<ApiItem[], unknown, GetApisQueryParams, void> path="/apis" {...props} />
);

export type UseGetApisProps = Omit<UseGetProps<ApiItem[], unknown, GetApisQueryParams, void>, 'path'>;

/**
 * gets a list of APIs
 */
export const useGetApis = (props: UseGetApisProps) =>
  useGet<ApiItem[], unknown, GetApisQueryParams, void>(`/apis`, props);

export interface GetApiOpenApiSpecResponse {
  [key: string]: any;
}

export interface GetApiOpenApiSpecPathParams {
  apiId: string;
}

export type GetApiOpenApiSpecProps = Omit<
  GetProps<GetApiOpenApiSpecResponse, unknown, void, GetApiOpenApiSpecPathParams>,
  'path'
> &
  GetApiOpenApiSpecPathParams;

/**
 * gets the OpenAPI spec for this api id
 */
export const GetApiOpenApiSpec = ({apiId, ...props}: GetApiOpenApiSpecProps) => (
  <Get<GetApiOpenApiSpecResponse, unknown, void, GetApiOpenApiSpecPathParams>
    path={`/apis/${apiId}/openapispec`}
    {...props}
  />
);

export type UseGetApiOpenApiSpecProps = Omit<
  UseGetProps<GetApiOpenApiSpecResponse, unknown, void, GetApiOpenApiSpecPathParams>,
  'path'
> &
  GetApiOpenApiSpecPathParams;

/**
 * gets the OpenAPI spec for this api id
 */
export const useGetApiOpenApiSpec = ({apiId, ...props}: UseGetApiOpenApiSpecProps) =>
  useGet<GetApiOpenApiSpecResponse, unknown, void, GetApiOpenApiSpecPathParams>(
    (paramsInPath: GetApiOpenApiSpecPathParams) => `/apis/${paramsInPath.apiId}/openapispec`,
    {pathParams: {apiId}, ...props}
  );

export interface GetServicesQueryParams {
  /**
   * optional filter on namespace
   */
  namespace?: string;
}

export type GetServicesProps = Omit<GetProps<ServiceItem[], unknown, GetServicesQueryParams, void>, 'path'>;

/**
 * list all services
 */
export const GetServices = (props: GetServicesProps) => (
  <Get<ServiceItem[], unknown, GetServicesQueryParams, void> path="/services" {...props} />
);

export type UseGetServicesProps = Omit<UseGetProps<ServiceItem[], unknown, GetServicesQueryParams, void>, 'path'>;

/**
 * list all services
 */
export const useGetServices = (props: UseGetServicesProps) =>
  useGet<ServiceItem[], unknown, GetServicesQueryParams, void>(`/services`, props);

export interface GetServicePathParams {
  namespace: string;
  name: string;
}

export type GetServiceProps = Omit<GetProps<ServiceItem, unknown, void, GetServicePathParams>, 'path'> &
  GetServicePathParams;

/**
 * get details for a single service
 */
export const GetService = ({namespace, name, ...props}: GetServiceProps) => (
  <Get<ServiceItem, unknown, void, GetServicePathParams> path={`/services/${namespace}/${name}`} {...props} />
);

export type UseGetServiceProps = Omit<UseGetProps<ServiceItem, unknown, void, GetServicePathParams>, 'path'> &
  GetServicePathParams;

/**
 * get details for a single service
 */
export const useGetService = ({namespace, name, ...props}: UseGetServiceProps) =>
  useGet<ServiceItem, unknown, void, GetServicePathParams>(
    (paramsInPath: GetServicePathParams) => `/services/${paramsInPath.namespace}/${paramsInPath.name}`,
    {pathParams: {namespace, name}, ...props}
  );

export interface GetEnvoyFleetsQueryParams {
  /**
   * optional filter on namespace
   */
  namespace?: string;
}

export type GetEnvoyFleetsProps = Omit<GetProps<EnvoyFleetItem[], unknown, GetEnvoyFleetsQueryParams, void>, 'path'>;

/**
 * list all envoy fleets
 */
export const GetEnvoyFleets = (props: GetEnvoyFleetsProps) => (
  <Get<EnvoyFleetItem[], unknown, GetEnvoyFleetsQueryParams, void> path="/fleets" {...props} />
);

export type UseGetEnvoyFleetsProps = Omit<
  UseGetProps<EnvoyFleetItem[], unknown, GetEnvoyFleetsQueryParams, void>,
  'path'
>;

/**
 * list all envoy fleets
 */
export const useGetEnvoyFleets = (props: UseGetEnvoyFleetsProps) =>
  useGet<EnvoyFleetItem[], unknown, GetEnvoyFleetsQueryParams, void>(`/fleets`, props);

export interface GetEnvoyFleetPathParams {
  /**
   * the namespace of the fleet
   */
  namespace: string;
  /**
   * the name of the fleet
   */
  name: string;
}

export type GetEnvoyFleetProps = Omit<GetProps<EnvoyFleetItem, unknown, void, GetEnvoyFleetPathParams>, 'path'> &
  GetEnvoyFleetPathParams;

/**
 * get details for a single envoy fleet
 */
export const GetEnvoyFleet = ({namespace, name, ...props}: GetEnvoyFleetProps) => (
  <Get<EnvoyFleetItem, unknown, void, GetEnvoyFleetPathParams> path={`/fleets/${namespace}/${name}`} {...props} />
);

export type UseGetEnvoyFleetProps = Omit<UseGetProps<EnvoyFleetItem, unknown, void, GetEnvoyFleetPathParams>, 'path'> &
  GetEnvoyFleetPathParams;

/**
 * get details for a single envoy fleet
 */
export const useGetEnvoyFleet = ({namespace, name, ...props}: UseGetEnvoyFleetProps) =>
  useGet<EnvoyFleetItem, unknown, void, GetEnvoyFleetPathParams>(
    (paramsInPath: GetEnvoyFleetPathParams) => `/fleets/${paramsInPath.namespace}/${paramsInPath.name}`,
    {pathParams: {namespace, name}, ...props}
  );
